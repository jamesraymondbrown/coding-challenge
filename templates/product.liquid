<link rel="stylesheet"
    href="https://fonts.googleapis.com/css?family=Montserrat">

<style>
    /* General styles */
    :root {
        --font-small: 18px;
        --font-medium: 24px;
        --font-large: 32px;
        --border-radius: 5px;
        --site-max-width: 1200px;
    }

    body {
        background: aliceblue;
        font-family: 'Montserrat', serif;
    }

    p {
        font-size: var(--font-small);
    }

    .d-none {
        display: none;
    }

    .error {
        color: red;
    }

    .success {
        color: green;
    }

    /* Product template container */

    .product__container {
        display: flex;
        margin: auto;
        padding: 10px;
        max-width: var(--site-max-width);
        flex-direction: column;
    }

    /* Image styles */

    .product__image--wrapper {
        position: relative;
    }

    .product__image {
        margin: 20px 0 10px;
        width: 100%;
        background: white;
        cursor: zoom-in;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .product__image-gallery {
        display: flex;
        gap: 10px;
    }

    .product__thumbnail {
        flex: 1;
        background: white;
        cursor: pointer;
        border-radius: var(--border-radius);

    }

    .product__thumbnail.selected {
        outline: 1px solid #e2e2e2;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Zoom image on container hover */

    .product__image--zoom-container {
        display: none;
        position: absolute;
        overflow: hidden;
        width: 300px;
        height: 200px;
        border-radius: var(--border-radius);
        z-index: 100;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .product__image--zoomed-preview {
        position: absolute;
        border: 1px solid #ddd;
        background-color: #f1f1f1;
        background-size: 300% 300%;
        width: 100%;
        height: 100%;
        border-radius: var(--border-radius);
        transition: background-position 0.5s ease;
    }

    /* Image Modal */

    .product__image--modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.9);
    }

    .product__image--modal-content {
        margin: 65px auto 0;
        display: block;
        max-width: 80%;
        max-height: 80%;
    }

    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
    }

    /* Content styles */

    .product__content-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .product__title {
        margin-bottom: 0;
        font-size: var(--font-large);
        text-transform: capitalize;
    }

    .product__old-price {
        text-decoration: line-through;
        margin-right: 10px;
    }

    .product__price,
    .product__old-price {
        font-size: var(--font-medium);
    }

    .product__variant-selectors {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .product__variant-selector {
        padding: 8px 12px;
        min-width: 50px;
        font-size: var(--font-small);
        border-radius: var(--border-radius);
        background-color: white;
        color: black;
        border: 1px solid #0000FF;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .product__variant-selector.selected,
    .product__variant-selector:hover {
        background-color: #0000FF;
        color: white;
    }

    .product__atc-form {
        display: flex;
        flex-direction: column;
        position: relative;
        gap: 20px;
        align-items: center;
        font-size: var(--font-medium);
    }

    select {
        height: 40px;
        border-radius: var(--border-radius);
        padding: 5px;
        font-size: 16px;
    }

    .product__add-to-cart {
        display: inline-block;
        width: 100%;
        padding: 10px 20px;
        font-size: var(--font-medium);
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        background-color: #0000FF;
        color: #fff;
        border: 1px solid #0000FF;
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .product__add-to-cart:hover {
      background-color: #000080;
      color: #fff;
    }

    .product__atc-message {
        position: absolute;
        font-size: var(--font-small);
        top: 110px;
    }

    .sale-badge {
        margin-top: 10px;
        padding: 8px 16px;
        width: 50px;
        border-radius: 20px;
        background-color: #3498db;
        color: #fff;
        text-align: center;
        text-decoration: none;
        font-weight: bold;
    }

    /* Loading Spinner */

    .loading-spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Medium breakpoint */

    @media only screen and (min-width: 500px) {
        .product__atc-message {
            top: 45px;
        }

        .product__atc-form {
            flex-direction: row;
        }

        .product__add-to-cart {
            width: auto;
        }
    }

    /* Large breakpoint */

    @media only screen and (min-width: 768px) {
        .product__container {
            padding: 20px;
            flex-direction: row;
            gap: 20px;
        }

        .product__image-container {
            width: 45%;
        }

        .product__content-container {
            width: 55%;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {

        // Update product image each time a thumbnail is clicked
        const productImage = document.querySelector('.product__image');
        const thumbnailImages = document.querySelectorAll('.product__thumbnail');

        thumbnailImages.forEach((thumbnail) => {
            thumbnail.addEventListener('click', function() {
                updateProductImage(thumbnail.src);
                thumbnailImages.forEach((img) => {
                    img.classList.remove('selected');
                });
                thumbnail.classList.add('selected');
            });
        });

        function updateProductImage(src) {
            productImage.src = src;
        }

        // Update selected variant variable when variant buttons are clicked
        let selectedVariantId = null;
        const variantButtons = document.querySelectorAll('.product__variant-selector')

        variantButtons.forEach((button) => {
            button.addEventListener('click', function() {
                variantButtons.forEach((btn) => {
                    btn.classList.remove('selected');
                });
                button.classList.add('selected');
                selectedVariantId = button.getAttribute('data-variant-id');
            });
        });

        // ATC Form Submit
        const form = document.getElementById("addToCartForm");
        const addedMessage = document.getElementById("AddedMessage")
        const errorMessage = document.getElementById("ErrorMessage");
        const loadingSpinner = document.getElementById('loadingSpinner');


        form.addEventListener("submit", function(event) {
            event.preventDefault();
            loadingSpinner.classList.remove('d-none')
            addedMessage.classList.add("d-none")
            errorMessage.classList.add("d-none")
            const selectedQuantity = form.querySelector("#quantity").value;

            // Added setTimeout to mimic external api call and display loading spinner
            setTimeout(() => {

                if (selectedVariantId === null) {
                    addedMessage.classList.add("d-none")
                    loadingSpinner.classList.add('d-none')
                    errorMessage.classList.remove("d-none")
                    return
                }

                // AJAX api POST request to cart route
                let data = {
                    'items': [{
                     'id': selectedVariantId,
                     'quantity': parseInt(selectedQuantity, 10)
                     }]
                   };

                fetch("/cart/add.js", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                })
                .then(response => response.json())
                .then(response => {
                    if (response.success === true) {
                        console.log("Product added to cart:", data)
                        errorMessage.classList.add("d-none")
                        loadingSpinner.classList.add('d-none')
                        addedMessage.classList.remove("d-none")
                    } else {
                        console.log("Product add to cart failed.")
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                });
            }, 500);
        });

        // Format prices in dollars. Adding this because the "money_with_currency" liquid filter isn't working
        const moneyElements = document.querySelectorAll('.money');
        moneyElements.forEach((element) => {
            const originalCents = parseFloat(element.textContent);
            const dollars = (originalCents / 100).toFixed(2);
            element.textContent = `$${dollars}`;
        });

        // Show an image modal when product image is clicked
        const modal = document.getElementById('productImageModal');
        const modalImage = document.getElementById('modalImage');

        productImage.addEventListener('click', function () {
          modal.style.display = 'block';
          modalImage.src = productImage.src;
        });

        function closeModal() {
          modal.style.display = 'none';
        }

        window.closeModal = closeModal;

        // Zoom into image on hover
        const zoomContainer = document.querySelector('.product__image--zoom-container');
        const zoomedPreview = document.querySelector('.product__image--zoomed-preview');

        productImage.addEventListener('mousemove', function (event) {
            zoomedPreview.style.backgroundImage = `url('${productImage.src}')`;
            const { offsetX, offsetY } = event;
            const percentX = (offsetX / productImage.clientWidth) * 100 + 4;
            const percentY = (offsetY / productImage.clientHeight) * 100 + 4;
            const zoomLevel = 200;

            // Calculate background size based on the zoom level
            const backgroundSizeX = productImage.clientWidth * (zoomLevel / 100);
            const backgroundSizeY = productImage.clientHeight * (zoomLevel / 100);

            // Set position of zoomContainer
            zoomContainer.style.top = `${percentY}%`;
            zoomContainer.style.left = `${percentX}%`;

            // Set the background position and size of the zoomedPreview
            zoomedPreview.style.backgroundPosition = `${percentX}% ${percentY}%`;
            zoomedPreview.style.backgroundSize = `${backgroundSizeX}px ${backgroundSizeY}px`;

            // Show the zoomed elements
            zoomContainer.style.display = 'block';
            zoomedPreview.style.display = 'block';
        });

        // Hide the zoomed preview when not hovering over the product image
        productImage.addEventListener('mouseleave', function () {
            zoomContainer.style.display = 'none';
        });
    });
</script>

{% block content %}
    <div class="product__container">
        <div class="product__image-container">
            {% if product.images.size > 0 %}
                <div class="product__image--wrapper">
                    <img class="product__image" src="{{ product.featured_image | image_url: 'large' }}" alt="{{ product.title }}" width="px" height="auto">

                    <div class="product__image--zoom-container">
                        <div class="product__image--zoomed-preview"></div>
                    </div>
                </div>
            {% endif %}
            {% if product.images.size > 1 %}
                <div class="product__image-gallery">
                    {% for image in product.images %}
                        <img class="product__thumbnail{% if forloop.index == 1 %} selected{% endif %}" src="{{ image | image_url: 'small' }}" alt="{{ product.title }}" width="10%" height="auto">
                    {% endfor %}
                </div>
            {% endif %}
        </div>

        <div class="product__content-container">
            <h1 class="product__title">{{ product.title | capitalize }}</h1>

            <div class="product__price-container">
                <span class="product__old-price money">{{ product.compare_at_price | money_with_currency }}</span>
                <span class="product__price money">{{ product.price | money_with_currency }}</span>
                {% if product.price < product.compare_at_price> %}
                    <div class="sale-badge">Sale</div>
                {% endif %}
            </div>

            <div class="product__variant-selectors">
                {% for variant in product.variants %}
                    <button class="product__variant-selector" data-variant-id="{{ variant.id }}">
                        {{ variant.title }}
                    </button>
                {% endfor %}
            </div>

            {% comment %} Adding liquid's {% form %} here throws an error, so using an html form instead {% endcomment %}
            <form id="addToCartForm" class="product__atc-form" method="post" action="/cart/add.js">
                <span class="product__quantity-selector">
                    <label for="quantity">Quantity:</label>
                    <select name="quantity" id="quantity">
                      {% assign maxQuantity = 10 %}
                      {% for i in (1..maxQuantity) %}
                        <option value="{{ i }}">{{ i }}</option>
                      {% endfor %}
                    </select>
                </span>

                <button
                    id="AddToCart"
                    type="submit"
                    name="add"
                    class="product__add-to-cart"
                    {% if product.selected_or_first_available_variant.available == false %}
                      disabled
                    {% endif %}
                  >
                    <span>
                      {%- if product.selected_or_first_available_variant.available == false -%}
                        Sold Out
                      {%- else -%}
                        Add to cart
                      {%- endif -%}
                    </span>
                </button>
                <p id="AddedMessage" class="d-none product__atc-message success">Product added to cart.</p>
                <p id="ErrorMessage" class="d-none product__atc-message error">Please select a size!</p>
                <div class="loading-spinner d-none" id="loadingSpinner"></div>
            </form>

            {% if product.description != blank %}
                <div class="product__description">
                    {{ product.description }}
                </div>
            {% endif %}
        </div>

        <div id="productImageModal" class="product__image--modal">
            <span class="close" onclick="closeModal()">&times;</span>
            <img class="product__image--modal-content" id="modalImage" width="1000px" height="auto">
        </div>

    </div>
{% endblock %}